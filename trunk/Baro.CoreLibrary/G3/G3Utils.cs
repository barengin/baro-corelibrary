using System;
using System.Collections.Generic;
using System.Text;

namespace Baro.CoreLibrary.G3
{
    static class G3Utils
    {
        // Cos Table 32 bit shifted
        public static readonly long[] scos = new long[]
        {
            4294967296, 4294313151, 4292350917, 4289081192, 4284504971, 4278623648, 4271439015, 4262953261, 4253168969, 4242089121, 
            4229717092, 4216056649, 4201111955, 4184887562, 4167388411, 4148619834, 4128587546, 4107297651, 4084756634, 4060971359, 
            4035949074, 4009697399, 3982224332, 3953538241, 3923647863, 3892562305, 3860291034, 3826843881, 3792231035, 3756463038, 
            3719550786, 3681505523, 3642338838, 3602062661, 3560689261, 3518231240, 3474701532, 3430113397, 3384480415, 3337816488, 
            3290135830, 3241452965, 3191782721, 3141140230, 3089540917, 3037000499, 2983534983, 2929160652, 2873894071, 2817752073, 
            2760751761, 2702910498, 2644245901, 2584775842, 2524518435, 2463492035, 2401715232, 2339206843, 2275985909, 2212071687, 
            2147483648, 2082241463, 2016365008, 1949874349, 1882789738, 1815131612, 1746920580, 1678177418, 1608923067, 1539178623, 
            1468965330, 1398304576, 1327217884, 1255726910, 1183853428, 1111619334, 1039046629, 966157421, 892973912, 819518394, 745813244, 
            671880911, 597743917, 523424844, 448946331, 374331064, 299601773, 224781220, 149892196, 74957514, 0, -74957514, -149892196, 
            -224781220, -299601773, -374331064, -448946331, -523424844, -597743917, -671880911, -745813244, -819518394, -892973912, 
            -966157421, -1039046629, -1111619334, -1183853428, -1255726910, -1327217884, -1398304576, -1468965330, -1539178623, -1608923067,
            -1678177418, -1746920580, -1815131612, -1882789738, -1949874349, -2016365008, -2082241463, -2147483647, -2212071687, -2275985909,
            -2339206843, -2401715232, -2463492035, -2524518435, -2584775842, -2644245901, -2702910498, -2760751761, -2817752073, -2873894071,
            -2929160652, -2983534983, -3037000499, -3089540917, -3141140230, -3191782721, -3241452965, -3290135830, -3337816488, -3384480415,
            -3430113397, -3474701532, -3518231240, -3560689261, -3602062661, -3642338838, -3681505523, -3719550786, -3756463038, -3792231035,
            -3826843881, -3860291034, -3892562305, -3923647863, -3953538241, -3982224332, -4009697399, -4035949074, -4060971359, -4084756634,
            -4107297651, -4128587546, -4148619834, -4167388411, -4184887562, -4201111955, -4216056649, -4229717092, -4242089121, -4253168969,
            -4262953261, -4271439015, -4278623648, -4284504971, -4289081192, -4292350917, -4294313151, -4294967296, -4294313151, -4292350917,
            -4289081192, -4284504971, -4278623648, -4271439015, -4262953261, -4253168969, -4242089121, -4229717092, -4216056649, -4201111955,
            -4184887562, -4167388411, -4148619834, -4128587546, -4107297651, -4084756634, -4060971359, -4035949074, -4009697399, -3982224332,
            -3953538241, -3923647863, -3892562305, -3860291034, -3826843881, -3792231035, -3756463038, -3719550786, -3681505523, -3642338838,
            -3602062661, -3560689261, -3518231240, -3474701532, -3430113397, -3384480415, -3337816488, -3290135830, -3241452965, -3191782721,
            -3141140230, -3089540917, -3037000499, -2983534983, -2929160652, -2873894071, -2817752073, -2760751761, -2702910498, -2644245901,
            -2584775842, -2524518435, -2463492035, -2401715232, -2339206843, -2275985909, -2212071687, -2147483648, -2082241463, -2016365008,
            -1949874349, -1882789738, -1815131612, -1746920580, -1678177418, -1608923067, -1539178623, -1468965330, -1398304576, -1327217884,
            -1255726910, -1183853428, -1111619334, -1039046629, -966157421, -892973912, -819518394, -745813244, -671880911, -597743917,
            -523424844, -448946331, -374331064, -299601773, -224781220, -149892196, -74957514, 0, 74957514, 149892196, 224781220, 299601773,
            374331064, 448946331, 523424844, 597743917, 671880911, 745813244, 819518394, 892973912, 966157421, 1039046629, 1111619334, 
            1183853428, 1255726910, 1327217884, 1398304576, 1468965330, 1539178623, 1608923067, 1678177418, 1746920580, 1815131612, 
            1882789738, 1949874349, 2016365008, 2082241463, 2147483648, 2212071687, 2275985909, 2339206843, 2401715232, 2463492035, 
            2524518435, 2584775842, 2644245901, 2702910498, 2760751761, 2817752073, 2873894071, 2929160652, 2983534983, 3037000499, 
            3089540917, 3141140230, 3191782721, 3241452965, 3290135830, 3337816488, 3384480415, 3430113397, 3474701532, 3518231240, 
            3560689261, 3602062661, 3642338838, 3681505523, 3719550786, 3756463038, 3792231035, 3826843881, 3860291034, 3892562305, 
            3923647863, 3953538241, 3982224332, 4009697399, 4035949074, 4060971359, 4084756634, 4107297651, 4128587546, 4148619834, 
            4167388411, 4184887562, 4201111955, 4216056649, 4229717092, 4242089121, 4253168969, 4262953261, 4271439015, 4278623648, 
            4284504971, 4289081192, 4292350917, 4294313151
        };

        // sin Table 32 bit shifted
        public static readonly long[] ssin = new long[]
        {
            0, 74957514, 149892196, 224781220, 299601773, 374331064, 448946331, 523424844, 597743917, 671880911, 745813244, 819518394,
            892973912, 966157421, 1039046629, 1111619334, 1183853428, 1255726910, 1327217884, 1398304576, 1468965330, 1539178623, 
            1608923067, 1678177418, 1746920580, 1815131612, 1882789738, 1949874349, 2016365008, 2082241463, 2147483647, 2212071687, 
            2275985909, 2339206843, 2401715232, 2463492035, 2524518435, 2584775842, 2644245901, 2702910498, 2760751761, 2817752073, 
            2873894071, 2929160652, 2983534983, 3037000499, 3089540917, 3141140230, 3191782721, 3241452965, 3290135830, 3337816488, 
            3384480415, 3430113397, 3474701532, 3518231240, 3560689261, 3602062661, 3642338838, 3681505523, 3719550786, 3756463038, 
            3792231035, 3826843881, 3860291034, 3892562305, 3923647863, 3953538241, 3982224332, 4009697399, 4035949074, 4060971359, 
            4084756634, 4107297651, 4128587546, 4148619834, 4167388411, 4184887562, 4201111955, 4216056649, 4229717092, 4242089121, 
            4253168969, 4262953261, 4271439015, 4278623648, 4284504971, 4289081192, 4292350917, 4294313151, 4294967296, 4294313151, 
            4292350917, 4289081192, 4284504971, 4278623648, 4271439015, 4262953261, 4253168969, 4242089121, 4229717092, 4216056649, 
            4201111955, 4184887562, 4167388411, 4148619834, 4128587546, 4107297651, 4084756634, 4060971359, 4035949074, 4009697399, 
            3982224332, 3953538241, 3923647863, 3892562305, 3860291034, 3826843881, 3792231035, 3756463038, 3719550786, 3681505523, 
            3642338838, 3602062661, 3560689261, 3518231240, 3474701532, 3430113397, 3384480415, 3337816488, 3290135830, 3241452965, 
            3191782721, 3141140230, 3089540917, 3037000499, 2983534983, 2929160652, 2873894071, 2817752073, 2760751761, 2702910498, 
            2644245901, 2584775842, 2524518435, 2463492035, 2401715232, 2339206843, 2275985909, 2212071687, 2147483647, 2082241463, 
            2016365008, 1949874349, 1882789738, 1815131612, 1746920580, 1678177418, 1608923067, 1539178623, 1468965330, 1398304576, 
            1327217884, 1255726910, 1183853428, 1111619334, 1039046629, 966157421, 892973912, 819518394, 745813244, 671880911, 597743917, 
            523424844, 448946331, 374331064, 299601773, 224781220, 149892196, 74957514, 0, -74957514, -149892196, -224781220, -299601773, 
            -374331064, -448946331, -523424844, -597743917, -671880911, -745813244, -819518394, -892973912, -966157421, -1039046629, 
            -1111619334, -1183853428, -1255726910, -1327217884, -1398304576, -1468965330, -1539178623, -1608923067, -1678177418, 
            -1746920580, -1815131612, -1882789738, -1949874349, -2016365008, -2082241463, -2147483648, -2212071687, -2275985909, 
            -2339206843, -2401715232, -2463492035, -2524518435, -2584775842, -2644245901, -2702910498, -2760751761, -2817752073, 
            -2873894071, -2929160652, -2983534983, -3037000499, -3089540917, -3141140230, -3191782721, -3241452965, -3290135830, 
            -3337816488, -3384480415, -3430113397, -3474701532, -3518231240, -3560689261, -3602062661, -3642338838, -3681505523, 
            -3719550786, -3756463038, -3792231035, -3826843881, -3860291034, -3892562305, -3923647863, -3953538241, -3982224332, 
            -4009697399, -4035949074, -4060971359, -4084756634, -4107297651, -4128587546, -4148619834, -4167388411, -4184887562, 
            -4201111955, -4216056649, -4229717092, -4242089121, -4253168969, -4262953261, -4271439015, -4278623648, -4284504971, 
            -4289081192, -4292350917, -4294313151, -4294967296, -4294313151, -4292350917, -4289081192, -4284504971, -4278623648, 
            -4271439015, -4262953261, -4253168969, -4242089121, -4229717092, -4216056649, -4201111955, -4184887562, -4167388411, 
            -4148619834, -4128587546, -4107297651, -4084756634, -4060971359, -4035949074, -4009697399, -3982224332, -3953538241, 
            -3923647863, -3892562305, -3860291034, -3826843881, -3792231035, -3756463038, -3719550786, -3681505523, -3642338838, 
            -3602062661, -3560689261, -3518231240, -3474701532, -3430113397, -3384480415, -3337816488, -3290135830, -3241452965, 
            -3191782721, -3141140230, -3089540917, -3037000499, -2983534983, -2929160652, -2873894071, -2817752073, -2760751761, 
            -2702910498, -2644245901, -2584775842, -2524518435, -2463492035, -2401715232, -2339206843, -2275985909, -2212071687, 
            -2147483648, -2082241463, -2016365008, -1949874349, -1882789738, -1815131612, -1746920580, -1678177418, -1608923067, 
            -1539178623, -1468965330, -1398304576, -1327217884, -1255726910, -1183853428, -1111619334, -1039046629, -966157421, 
            -892973912, -819518394, -745813244, -671880911, -597743917, -523424844, -448946331, -374331064, -299601773, -224781220, 
            -149892196, -74957514
        };

        private static readonly int[] sqrt_table = new int[] {
			0,    16,  22,  27,  32,  35,  39,  42,  45,  48,  50,  53,  55,  57,
			59,   61,  64,  65,  67,  69,  71,  73,  75,  76,  78,  80,  81,  83,
			84,   86,  87,  89,  90,  91,  93,  94,  96,  97,  98,  99, 101, 102,
			103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
			119, 120, 121, 122, 123, 124, 125, 126, 128, 128, 129, 130, 131, 132,
			133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 144, 145,
			146, 147, 148, 149, 150, 150, 151, 152, 153, 154, 155, 155, 156, 157,
			158, 159, 160, 160, 161, 162, 163, 163, 164, 165, 166, 167, 167, 168,
			169, 170, 170, 171, 172, 173, 173, 174, 175, 176, 176, 177, 178, 178,
			179, 180, 181, 181, 182, 183, 183, 184, 185, 185, 186, 187, 187, 188,
			189, 189, 190, 191, 192, 192, 193, 193, 194, 195, 195, 196, 197, 197,
			198, 199, 199, 200, 201, 201, 202, 203, 203, 204, 204, 205, 206, 206,
			207, 208, 208, 209, 209, 210, 211, 211, 212, 212, 213, 214, 214, 215,
			215, 216, 217, 217, 218, 218, 219, 219, 220, 221, 221, 222, 222, 223,
			224, 224, 225, 225, 226, 226, 227, 227, 228, 229, 229, 230, 230, 231,
			231, 232, 232, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238,
			239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246,
			246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253,
			253, 254, 254, 255
		};

        private static readonly int[] arctantab = new int[]
		{
			4157273, 2949120, 1740967, 919879, 466945, 234379, 117304, 58666,
			29335, 14668, 7334, 3667, 1833, 917, 458, 229,
			115, 57, 29, 14, 7, 4, 2, 1, 0
		};

        private const int ATAN_MAXITER = 22; /* the resolution of the arctan table */
        private const int ATAN_QUARTER = (90 << 16);

        //public const double DEG2RAD = Math.PI / 180d;
        public const double QPI = Math.PI / 4d;
        public const double HPI = Math.PI / 2d;

        /// <summary>
        /// Integer ATan2() hesaplayan fonksiyon
        /// </summary>
        /// <returns>16 bit kaydırılmış açı</returns>
        public unsafe static int ATan2(int argx, int argy)
        {
            int theta;
            int yi, i;

            /* Get the vector into the right half plane */
            theta = 0;
            if (argx < 0)
            {
                argx = -argx;
                argy = -argy;
                theta = 2 * ATAN_QUARTER;
            }

            if (argy > 0)
                theta = -theta;

            fixed (int* arctanp = arctantab)
            {
                int* arctanptr = arctanp;

                if (argy < 0)
                {	/* Rotate positive */
                    yi = argy + (argx << 1);
                    argx = argx - (argy << 1);
                    argy = yi;
                    theta -= *arctanptr++;	/* Subtract angle */
                }
                else
                {		/* Rotate negative */
                    yi = argy - (argx << 1);
                    argx = argx + (argy << 1);
                    argy = yi;
                    theta += *arctanptr++;	/* Add angle */
                }

                for (i = 0; i <= ATAN_MAXITER; i++)
                {
                    if (argy < 0)
                    {	/* Rotate positive */
                        yi = argy + (argx >> i);
                        argx = argx - (argy >> i);
                        argy = yi;
                        theta -= *arctanptr++;
                    }
                    else
                    {		/* Rotate negative */
                        yi = argy - (argx >> i);
                        argx = argx + (argy >> i);
                        argy = yi;
                        theta += *arctanptr++;
                    }
                }
            }

            // *argx = x;
            // *argy = theta;
            return theta;
        }

        /// <summary>
        /// Integer Sqrt() hesaplayan fonksiyon
        /// </summary>
        /// <param name="x">Karekökü hesaplanacak değer</param>
        /// <returns>Sonuç</returns>
        public static int FSqrt(int x)
        {
            int xn;

            if (x >= 0x10000)
            {
                if (x >= 0x1000000)
                {
                    if (x >= 0x10000000)
                    {
                        if (x >= 0x40000000)
                        {
                            xn = sqrt_table[x >> 24] << 8;
                        }
                        else
                        {
                            xn = sqrt_table[x >> 22] << 7;
                        }
                    }
                    else
                    {
                        if (x >= 0x4000000)
                        {
                            xn = sqrt_table[x >> 20] << 6;
                        }
                        else
                        {
                            xn = sqrt_table[x >> 18] << 5;
                        }
                    }

                    xn = (xn + 1 + (x / xn)) >> 1;
                    xn = (xn + 1 + (x / xn)) >> 1;

                    return ((xn * xn) > x) ? --xn : xn;
                }
                else
                {
                    if (x >= 0x100000)
                    {
                        if (x >= 0x400000)
                        {
                            xn = sqrt_table[x >> 16] << 4;
                        }
                        else
                        {
                            xn = sqrt_table[x >> 14] << 3;
                        }
                    }
                    else
                    {
                        if (x >= 0x40000)
                        {
                            xn = sqrt_table[x >> 12] << 2;
                        }
                        else
                        {
                            xn = sqrt_table[x >> 10] << 1;
                        }
                    }

                    xn = (xn + 1 + (x / xn)) >> 1;

                    return ((xn * xn) > x) ? --xn : xn;
                }
            }
            else
            {
                if (x >= 0x100)
                {
                    if (x >= 0x1000)
                    {
                        if (x >= 0x4000)
                        {
                            xn = (sqrt_table[x >> 8]) + 1;
                        }
                        else
                        {
                            xn = (sqrt_table[x >> 6] >> 1) + 1;
                        }
                    }
                    else
                    {
                        if (x >= 0x400)
                        {
                            xn = (sqrt_table[x >> 4] >> 2) + 1;
                        }
                        else
                        {
                            xn = (sqrt_table[x >> 2] >> 3) + 1;
                        }
                    }

                    return ((xn * xn) > x) ? --xn : xn;
                }
                else
                {
                    if (x >= 0)
                    {
                        return sqrt_table[x] >> 4;
                    }
                }
            }

            return 0;
        }
    }
}
